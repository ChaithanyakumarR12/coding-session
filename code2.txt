//1 calculator 
const Calculator = (A, B, C) => 
{
	switch(A)
	{
	 case '+':
	   return(B+C);
   case '-':
     return(B-C);
     case "*":
       return(B*C);
       case '/':
         return(B/C);
	} 
//2  Check whether the condition is fulfilled or not?
   const Check_divisibility = (N) => {
   let result = (N % 6 === 0) &&( N % 9 === 0) ? ("Divisible by both"):("Not Divisible by both");
   return result;
    
}; 
//3 Eligible Voter
const isEligible = (a) => {
  var ans="not eigible";
            if(a>=18)ans="eligible";
            return(ans)
};
//4 Find Relation
const findRelation = (x,y) => {
    if(x<y){
      return x+ " is smaller than " +y ;
    }
   else if(x>y){
      return x+ " is greater than " +y ;
    }
    else{
      return (x + " is equal to " +y);
    }
};
//5 Find Grades
const findGrades = (a) => {
   switch(true){
     case a<=10:
     return "E";
     case a>=11 && a<=20:
     return "D";
     case a>=21 && a<=30:
     return "C";
     case a>=31 && a<=40:
     return "B";
     case a>=41 && a<=50:
     return "A";
     default:
     return "Invalid marks entered";
   }
   
};
// 6 Get Value
const getValue = (a) => {
  
    if ((a==="P") || (a==="p")){
    return "PrepBytes";
    }
      else if((a==="Z") || (a==="z")){
       return "Zenith";
      }
     else if((a==="E") || (a==="e")){
    return "Expert Coder";
     }
      else if((a==="D") || (a==="d")){
    return "Data Structure";
      }
   
};
// 7 Find the maximum out of three numbers
const Max_out_of_three = (A,B,C) => {
  if(A>B && A>C)
    {
      return A;
    }
    else if(B>A && B>C)
    {
      return B;
    }
    else if(C>A && C>B)
   {
   return C ;
    }
    else 
    return -1;
};
//8 Second Smallest
const findSndSmallest = (x,y,z) => {

    if((x>y)&&(x>z))
{
if(y>z)
return y;
else
return z;
}

else if((y>x)&&(y>z))
{
if(x>z)
return x;
else
return z;
}

else if((z>x)&&(z>y))
{
if(x>y)
return x;
else
return y;
} 
};
//9 Check whether the triangle is Acute or Obtuse
const Triangle_Check = (A,B,C) => {
  
    if ( (A||B||c) >90){
        return "obtuse"
    }
  else {
        return "acute"
  }      
};
